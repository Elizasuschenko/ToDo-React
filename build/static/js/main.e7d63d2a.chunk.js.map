{"version":3,"sources":["Skelet.js","App.js","index.js"],"names":["Skelet","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","classLi","React","createRef","addClass","bind","assertThisInitialized","setState","_this2","mainArr","props","react_default","a","createElement","className","map","todo","Item","key","item","remove","removeDoshki","checkedDoshki","type","onKeyPress","AddDoshki","value","itemText","onChange","event","addInfo","target","length","onClick","active","completed","complite","Component","_ref","children","id","concat","checked","done","htmlFor","App","state","doshki","clearComplite","index","indexOf","newItems","toConsumableArray","objectSpread","_ref2","filter","_ref3","prevState","_ref4","doshkiNew","src_Skelet","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e7d63d2a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Skelet extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.classLi = React.createRef();\r\n        this.addClass = this.addClass.bind(this)\r\n    }\r\n\r\n    addClass(){\r\n        this.setState(() => {\r\n            return\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { mainArr } = this.props;\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>To do list </h1>\r\n                <ul>\r\n                    { mainArr.map((todo) => (\r\n                          <Skelet.Item key = { todo.item }\r\n                                       todo ={todo}\r\n                                       remove = {() => this.props.removeDoshki(todo)}\r\n                                       checkedDoshki = {() => this.props.checkedDoshki(todo)}\r\n                          />\r\n\r\n                        )\r\n                    )}\r\n                </ul>\r\n                <div>\r\n                    <input type=\"text\"\r\n                           onKeyPress={this.props.AddDoshki}\r\n                           value={ this.props.itemText }\r\n                           onChange={(event) => this.props.addInfo(event.target.value)\r\n                           }/>\r\n                </div>\r\n                <div className=\"bottom\">\r\n                    <span>{this.props.length} item left </span>\r\n                    <div className=\"bottom-center\">\r\n                        <button>All</button>\r\n                        <button onClick={ this.props.active }>Active</button>\r\n                        <button onClick={ this.props.completed }>Completed</button>\r\n                    </div>\r\n                    <button onClick={ this.props.complite }>Clear completed</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nSkelet.Item = ({ children, remove, todo, checkedDoshki }) => {\r\n\r\n    return (\r\n        <li >\r\n            <input id={`todo-${todo.item}`} type=\"checkbox\" className=\"todo_input\" checked={todo.done} onChange={ () => checkedDoshki() } />\r\n            <label htmlFor={`todo-${todo.item}`}>{todo.value}</label>\r\n            <span onClick={ () => remove() }>   Ð¥</span>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default Skelet","import React from 'react'\r\nimport Skelet from \"./Skelet\"\r\n\r\nclass App extends React.Component{\r\n    constructor(props){\r\n        super()\r\n        this.state = {\r\n            doshki: [\r\n\r\n            ],\r\n            itemText: '',\r\n            length:  0,\r\n            active: [],\r\n            complite: []\r\n        }\r\n        this.AddDoshki = this.AddDoshki.bind(this)\r\n        this.addInfo = this.addInfo.bind(this)\r\n        this.removeDoshki = this.removeDoshki.bind(this)\r\n        this.checkedDoshki = this.checkedDoshki.bind(this)\r\n        this.active = this.active.bind(this)\r\n        this.completed = this.completed.bind(this)\r\n        this.clearComplite = this.clearComplite.bind(this)\r\n    }\r\n    checkedDoshki(item){\r\n        this.setState(({doshki, length})  => {\r\n            const index = doshki.indexOf(item);\r\n            const newItems = [...doshki];\r\n            newItems[index] = {\r\n                ...item,\r\n                done: !item.done\r\n            };\r\n            if(newItems[index].done === true){\r\n                return {\r\n                    length: length - 1,\r\n                    doshki: newItems\r\n                }\r\n            }\r\n            return{\r\n                length: length + 1,\r\n                doshki: newItems\r\n            }\r\n        })\r\n    }\r\n    active(){\r\n        this.setState(({doshki}) => {\r\n            return {\r\n                doshki: doshki.filter(item => !item.done)\r\n            }\r\n        })\r\n\r\n    }\r\n    completed(){\r\n        this.setState(({doshki}) => {\r\n            return {\r\n                doshki: doshki.filter(item => item.done)\r\n            }\r\n        })\r\n    }\r\n    clearComplite(){\r\n        this.setState(prevState => {\r\n            return {\r\n                doshki: prevState.doshki.filter(item => item.done === false)\r\n            }\r\n        })\r\n    }\r\n    removeDoshki(todo){\r\n            this.setState(prevState => {\r\n                return {\r\n                    doshki: prevState.doshki.filter(item => item !== todo),\r\n                    length: prevState.length -1\r\n                }\r\n            })\r\n\r\n    }\r\n    AddDoshki(event){\r\n        if(event.key !== 'Enter') {\r\n            return\r\n        }\r\n            this.setState(({ doshki, itemText, length }) => {\r\n                let doshkiNew = {\r\n                    item: doshki.length ,\r\n                    value: itemText,\r\n                    done: false\r\n                }\r\n                if(doshkiNew.value === ''){\r\n                    return\r\n                }\r\n                return { doshki: [ ...doshki, doshkiNew ],\r\n                    itemText: '',\r\n                    length: length + 1\r\n                }\r\n            })\r\n\r\n    }\r\n    addInfo(value){\r\n\r\n        this.setState(() => {\r\n            return { itemText: value }\r\n        })\r\n    }\r\n    render(){\r\n        return (\r\n            <Skelet\r\n                completed = { this.completed }\r\n                active = { this.active }\r\n                complite = { this.clearComplite }\r\n                itemText = { this.state.itemText }\r\n                mainArr = { this.state.doshki}\r\n                length = { this.state.length}\r\n                AddDoshki = {this.AddDoshki}\r\n                addInfo = {this.addInfo}\r\n                removeDoshki = { this.removeDoshki }\r\n                checkedDoshki = { this.checkedDoshki }\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n"],"sourceRoot":""}