{"version":3,"sources":["Skelet.js","App.js","index.js"],"names":["Skelet","_this","this","length","state","items","filter","item","done","mainArr","props","ToDo","map","todo","react_default","a","createElement","Item","key","id","remove","removeDoshki","checkedDoshki","className","type","onKeyPress","AddDoshki","value","itemText","onChange","event","changeText","target","onClick","React","Component","_ref","children","concat","checked","htmlFor","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","list","bind","assertThisInitialized","clearComplite","_this2","setState","prevState","m","objectSpread","_this$state","filterBy","filteredItems","_ref2","doshkiNew","toConsumableArray","src_Skelet","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.64e40165.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Skelet extends React.Component {\r\n\r\n    render() {\r\n        const length = this.state.items.filter(item => !item.done).length;\r\n        const { mainArr } = this.props;\r\n        const items = this.filter();\r\n        const ToDo = items.map((todo) => (\r\n                <Skelet.Item todo = { todo }\r\n                             key = { todo.id }\r\n                             remove = {() => mainArr.removeDoshki(todo)}\r\n                             checkedDoshki = {() => mainArr.checkedDoshki(todo)}\r\n                />\r\n\r\n            )\r\n        );\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>To do list </h1>\r\n                <ul>\r\n                    { ToDo }\r\n                </ul>\r\n                <div>\r\n                    <input type=\"text\"\r\n                           onKeyPress={this.props.AddDoshki}\r\n                           value={ this.props.itemText }\r\n                           onChange={(event) => this.props.changeText(event.target.value)\r\n                           }/>\r\n                </div>\r\n                <div className=\"bottom\">\r\n                    <span>{length} item left </span>\r\n                    <div className=\"bottom-center\">\r\n                        <button onClick={() => {this.props.filter('all')}}>All</button>\r\n                        <button onClick={() => {this.props.filter('done')}}>Completed</button>\r\n                        <button onClick={() => {this.props.filter('active')}}>Active</button>\r\n                    </div>\r\n                    <button >Clear completed</button>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\nSkelet.Item = ({ children, remove, todo, checkedDoshki, key }) => {\r\n\r\n    return (\r\n        <li >\r\n            <input id={`todo-${todo.item}`} type=\"checkbox\" className=\"todo_input\" checked={todo.done} onChange={ () => checkedDoshki() } />\r\n            <label htmlFor={`todo-${todo.item}`}>{todo.value}</label>\r\n            <span onClick={ () => remove( key ) }>   Ð¥</span>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default Skelet","import React from 'react'\r\nimport Skelet from \"./Skelet\"\r\n\r\nclass App extends React.Component{\r\n    constructor(props){\r\n        super()\r\n        this.state = {\r\n            list: [\r\n\r\n            ],\r\n            itemText: '',\r\n\r\n        }\r\n        this.AddDoshki = this.AddDoshki.bind(this)\r\n        this.changeText = this.changeText.bind(this)\r\n        this.removeDoshki = this.removeDoshki.bind(this)\r\n        this.checkedDoshki = this.checkedDoshki.bind(this)\r\n        this.filter = this.filter.bind(this)\r\n        this.clearComplite = this.clearComplite.bind(this)\r\n    }\r\n    checkedDoshki(id){\r\n        this.setState(({list})  => {\r\n            this.setState(prevState => ({\r\n                list: prevState.list.map(m => ({\r\n                    ...list,\r\n                    done: !list.done\r\n                }))\r\n            }))})}\r\n\r\n    clearComplite(){\r\n        this.setState(prevState => {\r\n            return {\r\n                list: prevState.list.filter(item => item.done === false)\r\n            }\r\n        })\r\n    }\r\n    removeDoshki(todo){\r\n            this.setState(prevState => {\r\n                return {\r\n                    list: prevState.list.filter(item => item !== todo),\r\n                }\r\n            })\r\n\r\n    }\r\n    filter(){\r\n        const {filterBy, list} = this.state;\r\n        let filteredItems = list;\r\n        if (filterBy === 'active') {\r\n            filteredItems = list.filter(item => item.done === false );\r\n        }\r\n        if (filterBy === 'done') {\r\n            filteredItems = list.filter(item => item.done);\r\n        }\r\n        return filteredItems;\r\n    }\r\n    AddDoshki(event){\r\n        if(event.key !== 'Enter') {\r\n            return\r\n        }\r\n            this.setState(({ list, itemText, length }) => {\r\n                let doshkiNew = {\r\n                    item: list.length ,\r\n                    value: itemText,\r\n                    done: false\r\n                }\r\n                if(doshkiNew.value === ''){\r\n                    return\r\n                }\r\n                return { list: [ ...list, doshkiNew ],\r\n                    itemText: '',\r\n                    length: length + 1\r\n                }\r\n            })\r\n\r\n    }\r\n    changeText(value){\r\n\r\n        this.setState(() => {\r\n            return { itemText: value }\r\n        })\r\n    }\r\n    render(){\r\n        return (\r\n            <Skelet\r\n                filter = { this.filter }\r\n                itemText = { this.state.itemText }\r\n                mainArr = { this.state.list}\r\n                AddDoshki = {this.AddDoshki}\r\n                changeText = {this.changeText}\r\n                removeDoshki = { this.removeDoshki }\r\n                checkedDoshki = { this.checkedDoshki }\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n"],"sourceRoot":""}